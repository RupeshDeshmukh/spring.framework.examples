<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>net.atos.spring.training</groupId>
	<artifactId>example5</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>example5</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>4.3.10.RELEASE</spring.version>
		<slf4j.version>1.5.8</slf4j.version>
		<log4j.version>1.2.14</log4j.version>
	</properties>

	<repositories>
		<repository>
			<id>io.spring.repo.maven.release</id>
			<url>http://repo.spring.io/release/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<!-- Bill Of Materials Maven Dependency: It is possible to accidentally 
				mix different versions of Spring JARs when using Maven. For example, you 
				may find that a third-party library, or another Spring project, pulls in 
				a transitive dependency to an older release. If you forget to explicitly 
				declare a direct dependency yourself, all sorts of unexpected issues can 
				arise. To overcome such problems Maven supports the concept of a "bill of 
				materials" (BOM) dependency. You can import the spring-framework-bom in your 
				dependencyManagement section to ensure that all spring dependencies (both 
				direct and transitive) are at the same version. -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Spring dependencies. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<!-- Exclude default commons-logging used by spring-core to allow using 
				other more powerful 3rd party logging mechanism. -->
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- Slf4j dependencies. SLF4J is a cleaner dependency and more efficient 
			at runtime than commons-logging because it uses compile-time bindings instead 
			of runtime discovery of the other logging frameworks it integrates. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		<!-- JUnit dependency for writing test cases. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>

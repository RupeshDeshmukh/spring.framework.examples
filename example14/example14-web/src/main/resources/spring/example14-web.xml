<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<import resource="classpath*:spring/example14-business.xml" />

	<!-- Tells the framework to use annotations-based approach to scan files 
		in the specified packages. Thus we can use the @Controller annotation for 
		the controller class, instead of declaring XML elements. -->
	<mvc:annotation-driven enable-matrix-variables="true" />

	<!-- Tell the framework which packages to be scanned when using annotation-based 
		strategy. -->
	<context:component-scan
		base-package="net.atos.spring.training.example14.controller, net.atos.spring.training.example14.validator" />

	<!-- Convenient subclass of UrlBasedViewResolver that supports InternalResourceView 
		(in effect, Servlets and JSPs) and subclasses such as JstlView and TilesView. 
		You can specify the view class for all views generated by this resolver by 
		using setViewClass(..). See the UrlBasedViewResolver javadocs for details. -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames" value="WEB-INF/i18n/messages" />
		<property name="fallbackToSystemLocale" value="false" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="cacheSeconds" value="5" />
	</bean>

	<!-- To detect change in the user browser locale. -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" />
		</bean>
	</mvc:interceptors>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieName" value="locale" />
	</bean>

	<!-- Selects a static view for rendering without the need for an explicit 
		controller -->
	<mvc:view-controller path="/" view-name="index" />
	<mvc:view-controller path="/uncaughtException" />
	<mvc:view-controller path="/resourceNotFound" />
	<mvc:view-controller path="/dataAccessFailure" />

	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
		p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>
</beans>
